<?php
/**
 * User: Nicholas Rodofile
 */

include_once 'includes.php';

class VulnerabilityController extends Controller{

	public function create($vulnerability) {
		if($this->conn != null) {
			try {
				$statement = "CALL `NetworkInventory`.`create_Vulnerability`(:idVulnerability, :name, :description);";
				$dbh = $this->conn;
				$stmt = $dbh->prepare($statement);
				$stmt->bindParam(':idVulnerability', $vulnerability->idVulnerability());
				$stmt->bindParam(':name', $vulnerability->name());
				$stmt->bindParam(':description', $vulnerability->description());
				$result = $stmt->execute();
				$dbh = null;
				return $result;
			} catch (PDOException $e) {
				$msg = "<strong>Error!:</strong> " . $e->getMessage();
				echo alertDanger($msg);
				return null;
			}
		} else {
			$msg = "<strong>Error!:</strong> "."No Connection!";
			echo alertDanger($msg);
			return null;
		}
	}

	public function select() {
		if ($this->conn != null) {
			try {
				$statement = "CALL `NetworkInventory`.`select_Vulnerability`();";
				$dbh = $this->conn;
				$stmt = $dbh->prepare($statement);
				$stmt->execute();
				$result = $stmt->fetchall();
				$dbh = null;
				return $result;
			} catch (PDOException $e) {
				$msg = "<strong>Error!:</strong> " . $e->getMessage();
				echo alertDanger($msg);
				return null;
			}
		} else {
			$msg = "<strong>Error!:</strong> " . "No Connection!";
			echo alertDanger($msg);
			return null;
		}
	}


	public function read($vulnerability) {
		if($this->conn != null) {
			try {
				$statement = "CALL `NetworkInventory`.`read_Vulnerability`(:idVulnerability);";
				$dbh = $this->conn;
				$stmt = $dbh->prepare($statement);
				$stmt->bindParam(':idVulnerability', $vulnerability->idVulnerability());
				$stmt->execute();
				$result = $stmt->fetch(PDO::FETCH_ASSOC);
				$dbh = null;
				return $result;
			} catch (PDOException $e) {
				$msg = "<strong>Error!:</strong> " . $e->getMessage();
				echo alertDanger($msg);
				return null;
			}
		} else {
			$msg = "<strong>Error!:</strong> "."No Connection!";
			echo alertDanger($msg);
			return null;
		}	}

	public function update($vulnerability) {
		if($this->conn != null) {
			try {
				$statement = "CALL `NetworkInventory`.`update_Vulnerability`(:idVulnerability, :name, :description);";
				$dbh = $this->conn;
				$stmt = $dbh->prepare($statement);
				$stmt->bindParam(':idVulnerability', $vulnerability->idVulnerability());
				$stmt->bindParam(':name', $vulnerability->name());
				$stmt->bindParam(':description', $vulnerability->description());
				$stmt->execute();
				$dbh = null;
			} catch (PDOException $e) {
				$msg = "<strong>Error!:</strong> " . $e->getMessage();
				echo alertDanger($msg);
			}
		} else {
			$msg = "<strong>Error!:</strong> "."No Connection!";
			echo alertDanger($msg);
		}	}

	public function delete($vulnerability) {
		if ($this->conn != null) {
			try {
				$statement = "CALL `NetworkInventory`.`delete_Vulnerability`(:idVulnerability);";
				$dbh = $this->conn;
				$stmt = $dbh->prepare($statement);
				$stmt->bindParam(':idVulnerability', $vulnerability->idVulnerability());
				$stmt->execute();
				$dbh = null;
			} catch (PDOException $e) {
				$msg = "<strong>Error!:</strong> " . $e->getMessage();
				echo alertDanger($msg);
			}
		} else {
			$msg = "<strong>Error!:</strong> " . "No Connection!";
			echo alertDanger($msg);
		}
	}
}